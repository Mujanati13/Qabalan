import React, { useState, useEffect } from "react";
import {
  Row,
  Col,
  Card,
  Statistic,
  Typography,
  Space,
  Table,
  Tag,
  Alert,
  Spin,
  DatePicker,
  Select,
  Button,
  Dropdown,
  message,
} from "antd";
import {
  ShoppingCartOutlined,
  UserOutlined,
  DollarCircleOutlined,
  ShopOutlined,
  TrophyOutlined,
  RiseOutlined,
  FallOutlined,
  ReloadOutlined,
  WarningOutlined,
  DownloadOutlined,
  FileExcelOutlined,
  FilePdfOutlined,
} from "@ant-design/icons";
import { Line, Column, Pie } from "@ant-design/charts";
import { useLanguage } from "../contexts/LanguageContext";
import { useAuth } from "../hooks/useAuth";
import { useFormatters } from "../utils/formatters";
import dashboardService from "../services/dashboardService";
import QuickNotificationFAB from "../components/common/QuickNotificationFAB";
import api from "../services/api";
import dayjs from "dayjs";
import * as ExcelJS from 'exceljs';

const { Title, Text } = Typography;
const { RangePicker } = DatePicker;
const { Option } = Select;

const Dashboard = () => {
  const { currentLanguage } = useLanguage();
  const { user } = useAuth();
  const {
    formatCurrency,
    formatNumber,
    formatDate,
    formatPercentage,
    formatCompactNumber,
  } = useFormatters();

  // Local translations
  const translations = {
    en: {
      dashboard: {
        title: "Dashboard",
        subtitle: "Overview of your business performance",
        loading: "Loading...",
        refresh: "Refresh",
        export: "Export",
        exportExcel: "Export to Excel",
        exportPDF: "Export to PDF",
        exportSuccess: "Export completed successfully",
        exportError: "Export failed",
        clear: "Clear",
        clearFilters: "Clear Filters",
        viewAll: "View All",
        noData: "No data available",
        noAlerts: "No alerts at this time",
        
        // Time periods
        today: "Today",
        thisWeek: "This Week",
        thisMonth: "This Month",
        thisYear: "This Year",
        customRange: "Custom Range",
        startDate: "Start Date",
        endDate: "End Date",
        date: "Date",
        period: "Period",
        weekday: "Weekday",
        reportGenerated: "Report Generated",
        reportPeriod: "Report Period",
        
        // Statistics
        totalOrders: "Total Orders",
        totalRevenue: "Total Revenue",
        totalCustomers: "Total Customers",
        averageOrder: "Average Order Value",
        growth: "Growth",
        
        // Hot Orders
        hotOrders: "Hot Orders",
        needsAction: "Need Action",
        requiresAttention: "Requires Immediate Attention",
        priorityOrders: "Priority Orders",
        urgent: "Urgent",
        high: "High Priority",
        medium: "Medium Priority",
        ready: "Ready for Delivery",
        
        // Charts and Analytics
        orderFlow: "Order Flow",
        salesRevenue: "Sales Revenue",
        orderStatusDistribution: "Order Status Distribution",
        trendsAnalysis: "Trends Analysis",
        executiveSummary: "Executive Summary",
        
        // Table Headers
        orderId: "Order ID",
        customer: "Customer",
        amount: "Amount",
        status: "Status",
        priority: "Priority",
        product: "Product",
        sold: "Units Sold",
        revenue: "Revenue",
        rank: "Rank",
        orders: "Orders",
        trend: "Trend",
        performance: "Performance",
        
        // Status translations
        status_pending: "Pending",
        status_confirmed: "Confirmed",
        status_preparing: "Preparing",
        status_ready: "Ready",
        status_out_for_delivery: "Out for Delivery",
        status_delivered: "Delivered",
        status_cancelled: "Cancelled",
        
        // Performance levels
        excellent: "Excellent",
        good: "Good",
        growing: "Growing",
        
        // Trends
        increasing: "Increasing",
        decreasing: "Decreasing",
        stable: "Stable",
        
        // Shipping Analytics
        shippingAnalytics: "Shipping Analytics",
        avgDistance: "Average Distance",
        avgShippingCost: "Average Shipping Cost",
        freeShippingRate: "Free Shipping Rate",
        totalCalculations: "Total Calculations",
        popularZones: "Popular Zones",
        ordersText: "orders",
        
        // Inventory
        inventoryAlerts: "Inventory Alerts",
        stock: "Stock",
        stock_out_of_stock: "Out of Stock",
        stock_limited: "Limited Stock",
        stock_in_stock: "In Stock",
        
        // Products
        recentOrders: "Recent Orders",
        topProducts: "Top Products",
        bestSellers: "Best Sellers",
        
        // Report
        reportFooter: "Generated by FECS Admin Dashboard",
        allRightsReserved: "All rights reserved"
      },
      common: {
        loading: "Loading...",
        refresh: "Refresh"
      }
    },
    ar: {
      dashboard: {
        title: "لوحة التحكم",
        subtitle: "نظرة عامة على أداء عملك",
        loading: "جاري التحميل...",
        refresh: "تحديث",
        export: "تصدير",
        exportExcel: "تصدير إلى Excel",
        exportPDF: "تصدير إلى PDF",
        exportSuccess: "تم التصدير بنجاح",
        exportError: "فشل التصدير",
        clear: "مسح",
        clearFilters: "مسح المرشحات",
        viewAll: "عرض الكل",
        noData: "لا توجد بيانات متاحة",
        noAlerts: "لا توجد تنبيهات في الوقت الحالي",
        
        // Time periods
        today: "اليوم",
        thisWeek: "هذا الأسبوع",
        thisMonth: "هذا الشهر",
        thisYear: "هذا العام",
        customRange: "نطاق مخصص",
        startDate: "تاريخ البداية",
        endDate: "تاريخ النهاية",
        date: "التاريخ",
        period: "الفترة",
        weekday: "يوم الأسبوع",
        reportGenerated: "تم إنشاء التقرير",
        reportPeriod: "فترة التقرير",
        
        // Statistics
        totalOrders: "إجمالي الطلبات",
        totalRevenue: "إجمالي الإيرادات",
        totalCustomers: "إجمالي العملاء",
        averageOrder: "متوسط قيمة الطلب",
        growth: "النمو",
        
        // Hot Orders
        hotOrders: "الطلبات العاجلة",
        needsAction: "تحتاج إجراء",
        requiresAttention: "يتطلب اهتمام فوري",
        priorityOrders: "الطلبات ذات الأولوية",
        urgent: "عاجل",
        high: "أولوية عالية",
        medium: "أولوية متوسطة",
        ready: "جاهز للتسليم",
        
        // Charts and Analytics
        orderFlow: "تدفق الطلبات",
        salesRevenue: "إيرادات المبيعات",
        orderStatusDistribution: "توزيع حالة الطلبات",
        trendsAnalysis: "تحليل الاتجاهات",
        executiveSummary: "الملخص التنفيذي",
        
        // Table Headers
        orderId: "رقم الطلب",
        customer: "العميل",
        amount: "المبلغ",
        status: "الحالة",
        priority: "الأولوية",
        product: "المنتج",
        sold: "الوحدات المباعة",
        revenue: "الإيرادات",
        rank: "التصنيف",
        orders: "الطلبات",
        trend: "الاتجاه",
        performance: "الأداء",
        
        // Status translations
        status_pending: "في الانتظار",
        status_confirmed: "مؤكد",
        status_preparing: "قيد التحضير",
        status_ready: "جاهز",
        status_out_for_delivery: "في الطريق للتسليم",
        status_delivered: "تم التسليم",
        status_cancelled: "ملغى",
        
        // Performance levels
        excellent: "ممتاز",
        good: "جيد",
        growing: "في نمو",
        
        // Trends
        increasing: "متزايد",
        decreasing: "متناقص",
        stable: "مستقر",
        
        // Shipping Analytics
        shippingAnalytics: "تحليلات الشحن",
        avgDistance: "متوسط المسافة",
        avgShippingCost: "متوسط تكلفة الشحن",
        freeShippingRate: "معدل الشحن المجاني",
        totalCalculations: "إجمالي الحسابات",
        popularZones: "المناطق الشائعة",
        ordersText: "طلبات",
        
        // Inventory
        inventoryAlerts: "تنبيهات المخزون",
        stock: "المخزون",
        stock_out_of_stock: "نفدت الكمية",
        stock_limited: "كمية محدودة",
        stock_in_stock: "متوفر",
        
        // Products
        recentOrders: "الطلبات الأخيرة",
        topProducts: "أفضل المنتجات",
        bestSellers: "الأكثر مبيعاً",
        
        // Report
        reportFooter: "تم إنشاؤه بواسطة لوحة تحكم FECS",
        allRightsReserved: "جميع الحقوق محفوظة"
      },
      common: {
        loading: "جاري التحميل...",
        refresh: "تحديث"
      }
    }
  };

  // Get translation function for current language
  const t = (key) => {
    const keys = key.split('.');
    let value = translations[currentLanguage || 'en'];
    
    for (const k of keys) {
      value = value?.[k];
    }
    
    return value || key;
  };

  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(false);
  const [period, setPeriod] = useState("week");
  const [dateRange, setDateRange] = useState(null);
  const [stats, setStats] = useState({});
  const [orderFlow, setOrderFlow] = useState([]);
  const [salesData, setSalesData] = useState([]);
  const [topProducts, setTopProducts] = useState([]);
  const [recentOrders, setRecentOrders] = useState([]);
  const [hotOrders, setHotOrders] = useState([]);
  const [customerStats, setCustomerStats] = useState({});
  const [inventoryAlerts, setInventoryAlerts] = useState([]);
  const [shippingAnalytics, setShippingAnalytics] = useState(null);

  useEffect(() => {
    loadDashboardData();
    loadShippingAnalytics();
  }, [dateRange]);

  useEffect(() => {
    loadOrderFlow();
    loadSalesData();
  }, [period, dateRange]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);

      // Prepare date range parameters
      const dateParams =
        dateRange && dateRange.length === 2
          ? {
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : {};

      const [
        statsResponse,
        topProductsResponse,
        recentOrdersResponse,
        customerStatsResponse,
        inventoryAlertsResponse,
      ] = await Promise.all([
        dashboardService.getDashboardStats(dateParams),
        dashboardService.getTopProducts(10, dateParams),
        dashboardService.getRecentOrders(10, dateParams),
        dashboardService.getCustomerStats(dateParams),
        dashboardService.getInventoryAlerts(),
      ]);

      setStats(statsResponse.data);
      setTopProducts(topProductsResponse.data);
      setRecentOrders(recentOrdersResponse.data);
      
      // Filter hot orders that need action (pending, confirmed, preparing)
      const actionableStatuses = ['pending', 'confirmed', 'preparing', 'ready'];
      const filteredHotOrders = recentOrdersResponse.data.filter(order => 
        actionableStatuses.includes(order.order_status)
      );
      setHotOrders(filteredHotOrders);
      
      setCustomerStats(customerStatsResponse.data);
      setInventoryAlerts(inventoryAlertsResponse.data);
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    } finally {
      setLoading(false);
    }
  };

  const loadOrderFlow = async () => {
    try {
      const params =
        dateRange && dateRange.length === 2
          ? {
              period,
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : { period };

      const response = await dashboardService.getOrderFlow(params);
      setOrderFlow(response.data);
    } catch (error) {
      console.error("Error loading order flow:", error);
    }
  };

  const loadSalesData = async () => {
    try {
      const params =
        dateRange && dateRange.length === 2
          ? {
              period,
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : { period };

      const response = await dashboardService.getSalesData(params);
      setSalesData(response.data);
    } catch (error) {
      console.error("Error loading sales data:", error);
    }
  };

  const loadShippingAnalytics = async () => {
    try {
      const response = await api.get("/shipping/analytics");
      setShippingAnalytics(response.data.data);
    } catch (error) {
      console.error("Error loading shipping analytics:", error);
    }
  };

  const refreshData = async () => {
    setStatsLoading(true);
    await loadDashboardData();
    await loadOrderFlow();
    await loadSalesData();
    setStatsLoading(false);
  };

  const handleDateRangeChange = (dates) => {
    setDateRange(dates);
    // Clear period when using custom date range
    if (dates && dates.length === 2) {
      setPeriod("custom");
    }
  };

  const handlePeriodChange = (value) => {
    setPeriod(value);
    // Clear date range when using predefined periods
    if (value !== "custom") {
      setDateRange(null);
    }
  };

  const clearFilters = () => {
    setPeriod("week");
    setDateRange(null);
  };

  // Helper function to get period translation
  const getPeriodTranslation = (periodValue) => {
    const periodMap = {
      day: t("dashboard.today"),
      week: t("dashboard.thisWeek"),
      month: t("dashboard.thisMonth"),
      year: t("dashboard.thisYear"),
      custom: t("dashboard.customRange")
    };
    return periodMap[periodValue] || periodValue;
  };

  // Export functions
  const exportToExcel = async () => {
    try {
      message.loading({ content: t("common.loading"), key: "export" });
      
      // Create workbook
      const workbook = new ExcelJS.Workbook();
      workbook.creator = 'FECS Admin Dashboard';
      workbook.created = new Date();
      workbook.modified = new Date();
      
      // Create worksheet
      const worksheet = workbook.addWorksheet(t("dashboard.title"));
      
      // Define consistent styling
      const titleStyle = {
        font: { bold: true, size: 16, color: { argb: 'FF1890FF' } },
        alignment: { horizontal: 'center' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F8FF' } }
      };
      
      // Report Header
      worksheet.mergeCells('A1:F1');
      const titleCell = worksheet.getCell('A1');
      titleCell.value = `📊 ${t("dashboard.title")} - ${t("dashboard.reportGenerated")}`;
      titleCell.style = titleStyle;
      
      // Generate and download file
      const buffer = await workbook.xlsx.writeBuffer();
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `FECS-Dashboard-Report-${dayjs().format('YYYY-MM-DD-HH-mm')}.xlsx`;
      link.click();
      URL.revokeObjectURL(url);
      
      message.success({ content: t("dashboard.exportSuccess"), key: "export" });
    } catch (error) {
      console.error('Export error:', error);
      message.error({ content: t("dashboard.exportError"), key: "export" });
    }
  };

  const exportToPDF = async () => {
    try {
      message.loading({ content: t("common.loading"), key: "export" });
      
      // Create printable content
      const printContent = `
        <html>
          <head>
            <title>${t("dashboard.title")} - Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .header { text-align: center; margin-bottom: 30px; }
              .header h1 { color: #1890ff; margin: 0; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>📊 ${t("dashboard.title")}</h1>
              <p><strong>${t("dashboard.reportGenerated")}:</strong> ${new Date().toLocaleString()}</p>
            </div>
          </body>
        </html>
      `;
      
      // Create and trigger print
      const printWindow = window.open('', '_blank');
      printWindow.document.write(printContent);
      printWindow.document.close();
      
      setTimeout(() => {
        printWindow.print();
        message.success({ content: t("dashboard.exportSuccess"), key: "export" });
      }, 500);
      
    } catch (error) {
      console.error('PDF Export error:', error);
      message.error({ content: t("dashboard.exportError"), key: "export" });
    }
  };

  const exportMenuItems = [
    {
      key: 'excel',
      label: (
        <span>
          <FileExcelOutlined style={{ marginRight: 8, color: '#52c41a' }} />
          {t("dashboard.exportExcel")}
        </span>
      ),
      onClick: exportToExcel,
    },
    {
      key: 'pdf',
      label: (
        <span>
          <FilePdfOutlined style={{ marginRight: 8, color: '#ff4d4f' }} />
          {t("dashboard.exportPDF")}
        </span>
      ),
      onClick: exportToPDF,
    },
  ];

  // Chart configurations
  const orderFlowConfig = {
    data: orderFlow,
    xField: "period",
    yField: "orders",
    point: {
      size: 5,
      shape: "diamond",
    },
    smooth: true,
    color: "#1890ff",
    meta: {
      orders: {
        alias: t("dashboard.orders"),
        formatter: (value) => formatNumber(value),
      },
      period: {
        alias: t("dashboard.period"),
        formatter: (value) => {
          const date = dayjs(value);
          return date.isValid() ? date.format("YYYY/MM/DD") : value;
        },
      },
    },
    tooltip: {
      formatter: (datum) => {
        return {
          name: t("dashboard.orders"),
          value: formatNumber(datum.orders || 0),
        };
      },
    },
    yAxis: {
      label: {
        formatter: (value) => formatNumber(value),
      },
      title: {
        text: t("dashboard.orders"),
      },
    },
    xAxis: {
      label: {
        formatter: (value) => {
          const date = dayjs(value);
          return date.isValid() ? date.format("MM/DD") : value;
        },
      },
      title: {
        text: t("dashboard.period"),
      },
    },
  };

  // Table columns
  const orderColumns = [
    {
      title: t("dashboard.orderId"),
      dataIndex: "order_number",
      key: "order_number",
      render: (text) => <Text strong>{text}</Text>,
    },
    {
      title: t("dashboard.customer"),
      dataIndex: "customer_name",
      key: "customer_name",
    },
    {
      title: t("dashboard.amount"),
      dataIndex: "total_amount",
      key: "total_amount",
      render: (amount) => <Text strong>{formatCurrency(amount)}</Text>,
    },
    {
      title: t("dashboard.status"),
      dataIndex: "order_status",
      key: "order_status",
      render: (status) => {
        const colors = {
          pending: "warning",
          confirmed: "processing",
          preparing: "blue",
          ready: "cyan",
          out_for_delivery: "geekblue",
          delivered: "success",
          cancelled: "error",
        };
        return (
          <Tag color={colors[status] || "default"}>
            {t(`dashboard.status_${status}`) || status}
          </Tag>
        );
      },
    },
    {
      title: t("dashboard.date"),
      dataIndex: "created_at",
      key: "created_at",
      render: (date) => formatDate(date, "short"),
    },
  ];

  const topProductsColumns = [
    {
      title: t("dashboard.product"),
      dataIndex: "name",
      key: "name",
      render: (text) => <Text strong>{text}</Text>,
    },
    {
      title: t("dashboard.sold"),
      dataIndex: "total_sold",
      key: "total_sold",
      render: (value) => <Text>{formatNumber(value)}</Text>,
    },
    {
      title: t("dashboard.revenue"),
      dataIndex: "total_revenue",
      key: "total_revenue",
      render: (value) => (
        <Text strong type="success">
          {formatCurrency(value)}
        </Text>
      ),
    },
  ];

  if (loading) {
    return (
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "400px",
        }}
      >
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div>
      {/* Page Header */}
      <div style={{ marginBottom: 24 }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={2} style={{ margin: 0 }}>
              {t("dashboard.title")}
            </Title>
            <Text type="secondary">{t("dashboard.subtitle")}</Text>
          </Col>
          <Col>
            <Space>
              <Select
                value={period}
                onChange={handlePeriodChange}
                style={{ width: 120 }}
              >
                <Option value="day">{t("dashboard.today")}</Option>
                <Option value="week">{t("dashboard.thisWeek")}</Option>
                <Option value="month">{t("dashboard.thisMonth")}</Option>
                <Option value="year">{t("dashboard.thisYear")}</Option>
                <Option value="custom">{t("dashboard.customRange")}</Option>
              </Select>

              {period === "custom" && (
                <RangePicker
                  value={dateRange}
                  onChange={handleDateRangeChange}
                  style={{ width: 240 }}
                  placeholder={[
                    t("dashboard.startDate"),
                    t("dashboard.endDate"),
                  ]}
                  format="YYYY-MM-DD"
                />
              )}

              {(period === "custom" || dateRange) && (
                <Button
                  onClick={clearFilters}
                  title={t("dashboard.clearFilters")}
                >
                  {t("dashboard.clear")}
                </Button>
              )}

              <Button
                icon={<ReloadOutlined />}
                onClick={refreshData}
                loading={statsLoading}
              >
                {t("common.refresh")}
              </Button>

              <Dropdown
                menu={{
                  items: exportMenuItems,
                }}
                placement="bottomLeft"
              >
                <Button icon={<DownloadOutlined />}>
                  {t("dashboard.export")} ▼
                </Button>
              </Dropdown>
            </Space>
          </Col>
        </Row>
      </div>

      {/* Statistics Cards */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalOrders")}
              value={formatCompactNumber(stats.totalOrders || 0)}
              prefix={<ShoppingCartOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.ordersGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.ordersGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.ordersGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#1890ff" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalRevenue")}
              value={formatCurrency(stats.totalRevenue || 0)}
              prefix={<DollarCircleOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.revenueGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.revenueGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.revenueGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#52c41a" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalCustomers")}
              value={formatCompactNumber(stats.totalCustomers || 0)}
              prefix={<UserOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.customersGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.customersGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.customersGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#faad14" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.averageOrder")}
              value={formatCurrency(stats.averageOrderValue || 0)}
              prefix={<ShopOutlined />}
              valueStyle={{ color: "#722ed1" }}
            />
          </Card>
        </Col>
      </Row>

      {/* Hot Orders Section */}
      {hotOrders.length > 0 && (
        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
          <Col span={24}>
            <Card
              title={
                <Space>
                  <span style={{ color: '#ff4d4f' }}>
                    🔥 {t("dashboard.hotOrders")}
                  </span>
                  <Tag color="red" style={{ fontWeight: 'bold' }}>
                    {hotOrders.length} {t("dashboard.needsAction")}
                  </Tag>
                </Space>
              }
              extra={
                <Space>
                  <Text type="secondary">
                    {t("dashboard.requiresAttention")}
                  </Text>
                  <Button type="link" href="/orders">
                    {t("dashboard.viewAll")}
                  </Button>
                </Space>
              }
              style={{ 
                border: '2px solid #ff7875',
                boxShadow: '0 4px 12px rgba(255, 77, 79, 0.15)'
              }}
            >
              <Table
                dataSource={hotOrders}
                columns={orderColumns}
                pagination={false}
                size="small"
                scroll={{ x: 600 }}
                rowKey="id"
              />
            </Card>
          </Col>
        </Row>
      )}

      {/* Shipping Analytics */}
      {shippingAnalytics && (
        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
          <Col span={24}>
            <Card
              title={`🚚 ${t("dashboard.shippingAnalytics")}`}
              extra={
                <Button
                  size="small"
                  icon={<ReloadOutlined />}
                  onClick={loadShippingAnalytics}
                >
                  {t("common.refresh")}
                </Button>
              }
            >
              <Row gutter={16}>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.avgDistance")}
                    value={
                      shippingAnalytics.distance_statistics?.avg_distance || 0
                    }
                    suffix="km"
                    precision={1}
                    prefix="🛣️"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.avgShippingCost")}
                    value={
                      shippingAnalytics.distance_statistics
                        ?.avg_shipping_cost || 0
                    }
                    suffix="JOD"
                    precision={2}
                    prefix="💰"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.freeShippingRate")}
                    value={
                      shippingAnalytics.free_shipping_analysis
                        ?.free_shipping_percentage || 0
                    }
                    suffix="%"
                    precision={1}
                    prefix="🎁"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.totalCalculations")}
                    value={
                      shippingAnalytics.calculation_summary
                        ?.total_calculations || 0
                    }
                    prefix="📊"
                  />
                </Col>
              </Row>

              {shippingAnalytics.zone_usage && (
                <div style={{ marginTop: 16 }}>
                  <Title level={5}>{t("dashboard.popularZones")}</Title>
                  <Row gutter={8}>
                    {shippingAnalytics.zone_usage
                      .slice(0, 3)
                      .map((zone, index) => (
                        <Col key={zone.zone_name_en}>
                          <Tag
                            color={["blue", "green", "orange"][index]}
                            style={{ marginBottom: 4 }}
                          >
                            {zone.zone_name_en}: {zone.usage_count} {t("dashboard.ordersText")}
                          </Tag>
                        </Col>
                      ))}
                  </Row>
                </div>
              )}
            </Card>
          </Col>
        </Row>
      )}

      {/* Charts Row */}
      <Row gutter={[16]} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={24}>
          <Card
            title={t("dashboard.orderFlow")}
            extra={
              <Text type="secondary">
                {period === "custom" && dateRange && dateRange.length === 2
                  ? `${dateRange[0].format("MMM DD")} - ${dateRange[1].format(
                      "MMM DD, YYYY"
                    )}`
                  : getPeriodTranslation(period)}
              </Text>
            }
          >
            {orderFlow.length > 0 ? (
              <div style={{ width: "100%", padding: 16 }}>
                <Line {...orderFlowConfig} height={300} />
              </div>
            ) : (
              <div
                style={{
                  height: 300,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Text type="secondary">{t("dashboard.noData")}</Text>
              </div>
            )}
          </Card>
        </Col>
      </Row>

      {/* Data Tables Row */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={16}>
          <Card
            title={t("dashboard.recentOrders")}
            extra={
              <Button type="link" href="/orders">
                {t("dashboard.viewAll")}
              </Button>
            }
          >
            <Table
              dataSource={recentOrders}
              columns={orderColumns}
              pagination={false}
              size="small"
              scroll={{ x: 600 }}
              rowKey="id"
            />
          </Card>
        </Col>

        <Col xs={24} lg={8}>
          <Card
            title={t("dashboard.topProducts")}
            extra={<TrophyOutlined style={{ color: "#faad14" }} />}
          >
            <Table
              dataSource={topProducts}
              columns={topProductsColumns}
              pagination={false}
              size="small"
              showHeader={false}
              rowKey="id"
            />
          </Card>
        </Col>
      </Row>

      {/* Alerts */}
      <Row gutter={[16, 16]}>
        <Col xs={24}>
          <Card
            title={t("dashboard.inventoryAlerts")}
            extra={<WarningOutlined style={{ color: "#faad14" }} />}
          >
            <Space direction="vertical" style={{ width: "100%" }}>
              {inventoryAlerts.length > 0 ? (
                inventoryAlerts.map((item, index) => (
                  <Alert
                    key={index}
                    message={item.name}
                    description={`${t("dashboard.stock")}: ${
                      t(`dashboard.stock_${item.stock_status}`) ||
                      item.stock_status
                    }`}
                    type={
                      item.stock_status === "out_of_stock" ? "error" : "warning"
                    }
                    showIcon
                    size="small"
                  />
                ))
              ) : (
                <Text type="secondary">{t("dashboard.noAlerts")}</Text>
              )}
            </Space>
          </Card>
        </Col>
      </Row>

      <QuickNotificationFAB />
    </div>
  );
};

export default Dashboard;
