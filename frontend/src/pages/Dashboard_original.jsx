import React, { useState, useEffect } from "react";
import {
  Row,
  Col,
  Card,
  Statistic,
  Typography,
  Space,
  Table,
  Tag,
  Alert,
  Spin,
  DatePicker,
  Select,
  Button,
  Dropdown,
  message,
} from "antd";
import {
  ShoppingCartOutlined,
  UserOutlined,
  DollarCircleOutlined,
  ShopOutlined,
  TrophyOutlined,
  RiseOutlined,
  FallOutlined,
  ReloadOutlined,
  WarningOutlined,
  DownloadOutlined,
  FileExcelOutlined,
  FilePdfOutlined,
} from "@ant-design/icons";
import { Line, Column, Pie } from "@ant-design/charts";
import { useLanguage } from "../contexts/LanguageContext";
import { useAuth } from "../hooks/useAuth";
import { useFormatters } from "../utils/formatters";
import dashboardService from "../services/dashboardService";
import QuickNotificationFAB from "../components/common/QuickNotificationFAB";
import api from "../services/api";
import dayjs from "dayjs";
import * as ExcelJS from 'exceljs';

const { Title, Text } = Typography;
const { RangePicker } = DatePicker;
const { Option } = Select;

const Dashboard = () => {
  const { t, currentLanguage } = useLanguage();
  const { user } = useAuth();
  const {
    formatCurrency,
    formatNumber,
    formatDate,
    formatPercentage,
    formatCompactNumber,
  } = useFormatters();

  // Local translations
  const translations = {
    en: {
      dashboard: {
        title: "Dashboard",
        subtitle: "Overview of your business performance",
        loading: "Loading...",
        refresh: "Refresh",
        export: "Export",
        exportExcel: "Export to Excel",
        exportPDF: "Export to PDF",
        exportSuccess: "Export completed successfully",
        exportError: "Export failed",
        clear: "Clear",
        clearFilters: "Clear Filters",
        viewAll: "View All",
        noData: "No data available",
        noAlerts: "No alerts at this time",
        
        // Time periods
        today: "Today",
        thisWeek: "This Week",
        thisMonth: "This Month",
        thisYear: "This Year",
        customRange: "Custom Range",
        startDate: "Start Date",
        endDate: "End Date",
        date: "Date",
        period: "Period",
        weekday: "Weekday",
        reportGenerated: "Report Generated",
        reportPeriod: "Report Period",
        
        // Statistics
        totalOrders: "Total Orders",
        totalRevenue: "Total Revenue",
        totalCustomers: "Total Customers",
        averageOrder: "Average Order Value",
        growth: "Growth",
        
        // Hot Orders
        hotOrders: "Hot Orders",
        needsAction: "Need Action",
        requiresAttention: "Requires Immediate Attention",
        priorityOrders: "Priority Orders",
        urgent: "Urgent",
        high: "High Priority",
        medium: "Medium Priority",
        ready: "Ready for Delivery",
        
        // Charts and Analytics
        orderFlow: "Order Flow",
        salesRevenue: "Sales Revenue",
        orderStatusDistribution: "Order Status Distribution",
        trendsAnalysis: "Trends Analysis",
        executiveSummary: "Executive Summary",
        
        // Table Headers
        orderId: "Order ID",
        customer: "Customer",
        amount: "Amount",
        status: "Status",
        priority: "Priority",
        product: "Product",
        sold: "Units Sold",
        revenue: "Revenue",
        rank: "Rank",
        orders: "Orders",
        trend: "Trend",
        performance: "Performance",
        
        // Status translations
        status_pending: "Pending",
        status_confirmed: "Confirmed",
        status_preparing: "Preparing",
        status_ready: "Ready",
        status_out_for_delivery: "Out for Delivery",
        status_delivered: "Delivered",
        status_cancelled: "Cancelled",
        
        // Performance levels
        excellent: "Excellent",
        good: "Good",
        growing: "Growing",
        
        // Trends
        increasing: "Increasing",
        decreasing: "Decreasing",
        stable: "Stable",
        
        // Shipping Analytics
        shippingAnalytics: "Shipping Analytics",
        avgDistance: "Average Distance",
        avgShippingCost: "Average Shipping Cost",
        freeShippingRate: "Free Shipping Rate",
        totalCalculations: "Total Calculations",
        popularZones: "Popular Zones",
        ordersText: "orders",
        
        // Inventory
        inventoryAlerts: "Inventory Alerts",
        stock: "Stock",
        stock_out_of_stock: "Out of Stock",
        stock_limited: "Limited Stock",
        stock_in_stock: "In Stock",
        
        // Products
        recentOrders: "Recent Orders",
        topProducts: "Top Products",
        bestSellers: "Best Sellers",
        
        // Report
        reportFooter: "Generated by FECS Admin Dashboard",
        allRightsReserved: "All rights reserved"
      },
      common: {
        loading: "Loading...",
        refresh: "Refresh"
      }
    },
    ar: {
      dashboard: {
        title: "لوحة التحكم",
        subtitle: "نظرة عامة على أداء عملك",
        loading: "جاري التحميل...",
        refresh: "تحديث",
        export: "تصدير",
        exportExcel: "تصدير إلى Excel",
        exportPDF: "تصدير إلى PDF",
        exportSuccess: "تم التصدير بنجاح",
        exportError: "فشل التصدير",
        clear: "مسح",
        clearFilters: "مسح المرشحات",
        viewAll: "عرض الكل",
        noData: "لا توجد بيانات متاحة",
        noAlerts: "لا توجد تنبيهات في الوقت الحالي",
        
        // Time periods
        today: "اليوم",
        thisWeek: "هذا الأسبوع",
        thisMonth: "هذا الشهر",
        thisYear: "هذا العام",
        customRange: "نطاق مخصص",
        startDate: "تاريخ البداية",
        endDate: "تاريخ النهاية",
        date: "التاريخ",
        period: "الفترة",
        weekday: "يوم الأسبوع",
        reportGenerated: "تم إنشاء التقرير",
        reportPeriod: "فترة التقرير",
        
        // Statistics
        totalOrders: "إجمالي الطلبات",
        totalRevenue: "إجمالي الإيرادات",
        totalCustomers: "إجمالي العملاء",
        averageOrder: "متوسط قيمة الطلب",
        growth: "النمو",
        
        // Hot Orders
        hotOrders: "الطلبات العاجلة",
        needsAction: "تحتاج إجراء",
        requiresAttention: "يتطلب اهتمام فوري",
        priorityOrders: "الطلبات ذات الأولوية",
        urgent: "عاجل",
        high: "أولوية عالية",
        medium: "أولوية متوسطة",
        ready: "جاهز للتسليم",
        
        // Charts and Analytics
        orderFlow: "تدفق الطلبات",
        salesRevenue: "إيرادات المبيعات",
        orderStatusDistribution: "توزيع حالة الطلبات",
        trendsAnalysis: "تحليل الاتجاهات",
        executiveSummary: "الملخص التنفيذي",
        
        // Table Headers
        orderId: "رقم الطلب",
        customer: "العميل",
        amount: "المبلغ",
        status: "الحالة",
        priority: "الأولوية",
        product: "المنتج",
        sold: "الوحدات المباعة",
        revenue: "الإيرادات",
        rank: "التصنيف",
        orders: "الطلبات",
        trend: "الاتجاه",
        performance: "الأداء",
        
        // Status translations
        status_pending: "في الانتظار",
        status_confirmed: "مؤكد",
        status_preparing: "قيد التحضير",
        status_ready: "جاهز",
        status_out_for_delivery: "في الطريق للتسليم",
        status_delivered: "تم التسليم",
        status_cancelled: "ملغى",
        
        // Performance levels
        excellent: "ممتاز",
        good: "جيد",
        growing: "في نمو",
        
        // Trends
        increasing: "متزايد",
        decreasing: "متناقص",
        stable: "مستقر",
        
        // Shipping Analytics
        shippingAnalytics: "تحليلات الشحن",
        avgDistance: "متوسط المسافة",
        avgShippingCost: "متوسط تكلفة الشحن",
        freeShippingRate: "معدل الشحن المجاني",
        totalCalculations: "إجمالي الحسابات",
        popularZones: "المناطق الشائعة",
        ordersText: "طلبات",
        
        // Inventory
        inventoryAlerts: "تنبيهات المخزون",
        stock: "المخزون",
        stock_out_of_stock: "نفدت الكمية",
        stock_limited: "كمية محدودة",
        stock_in_stock: "متوفر",
        
        // Products
        recentOrders: "الطلبات الأخيرة",
        topProducts: "أفضل المنتجات",
        bestSellers: "الأكثر مبيعاً",
        
        // Report
        reportFooter: "تم إنشاؤه بواسطة لوحة تحكم FECS",
        allRightsReserved: "جميع الحقوق محفوظة"
      },
      common: {
        loading: "جاري التحميل...",
        refresh: "تحديث"
      }
    }
  };

  // Get translation function for current language
  const getTranslation = (key) => {
    const keys = key.split('.');
    let value = translations[currentLanguage || 'en'];
    
    for (const k of keys) {
      value = value?.[k];
    }
    
    return value || key;
  };
  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(false);
  const [period, setPeriod] = useState("week");
  const [dateRange, setDateRange] = useState(null);
  const [stats, setStats] = useState({});
  const [orderFlow, setOrderFlow] = useState([]);
  const [salesData, setSalesData] = useState([]);
  const [topProducts, setTopProducts] = useState([]);
  const [recentOrders, setRecentOrders] = useState([]);
  const [hotOrders, setHotOrders] = useState([]);
  const [customerStats, setCustomerStats] = useState({});
  const [inventoryAlerts, setInventoryAlerts] = useState([]);
  const [shippingAnalytics, setShippingAnalytics] = useState(null);

  useEffect(() => {
    loadDashboardData();
    loadShippingAnalytics();
  }, [dateRange]);

  useEffect(() => {
    loadOrderFlow();
    loadSalesData();
  }, [period, dateRange]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);

      // Prepare date range parameters
      const dateParams =
        dateRange && dateRange.length === 2
          ? {
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : {};

      const [
        statsResponse,
        topProductsResponse,
        recentOrdersResponse,
        customerStatsResponse,
        inventoryAlertsResponse,
      ] = await Promise.all([
        dashboardService.getDashboardStats(dateParams),
        dashboardService.getTopProducts(10, dateParams),
        dashboardService.getRecentOrders(10, dateParams),
        dashboardService.getCustomerStats(dateParams),
        dashboardService.getInventoryAlerts(),
      ]);

      setStats(statsResponse.data);
      setTopProducts(topProductsResponse.data);
      setRecentOrders(recentOrdersResponse.data);
      
      // Filter hot orders that need action (pending, confirmed, preparing)
      const actionableStatuses = ['pending', 'confirmed', 'preparing', 'ready'];
      const filteredHotOrders = recentOrdersResponse.data.filter(order => 
        actionableStatuses.includes(order.order_status)
      );
      setHotOrders(filteredHotOrders);
      
      setCustomerStats(customerStatsResponse.data);
      setInventoryAlerts(inventoryAlertsResponse.data);
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    } finally {
      setLoading(false);
    }
  };

  const loadOrderFlow = async () => {
    try {
      const params =
        dateRange && dateRange.length === 2
          ? {
              period,
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : { period };

      const response = await dashboardService.getOrderFlow(params);
      setOrderFlow(response.data);
    } catch (error) {
      console.error("Error loading order flow:", error);
    }
  };

  const loadSalesData = async () => {
    try {
      const params =
        dateRange && dateRange.length === 2
          ? {
              period,
              startDate: dateRange[0].format("YYYY-MM-DD"),
              endDate: dateRange[1].format("YYYY-MM-DD"),
            }
          : { period };

      const response = await dashboardService.getSalesData(params);
      setSalesData(response.data);
    } catch (error) {
      console.error("Error loading sales data:", error);
    }
  };

  const loadShippingAnalytics = async () => {
    try {
      const response = await api.get("/shipping/analytics");
      setShippingAnalytics(response.data.data);
    } catch (error) {
      console.error("Error loading shipping analytics:", error);
    }
  };

  const refreshData = async () => {
    setStatsLoading(true);
    await loadDashboardData();
    await loadOrderFlow();
    await loadSalesData();
    setStatsLoading(false);
  };

  const handleDateRangeChange = (dates) => {
    setDateRange(dates);
    // Clear period when using custom date range
    if (dates && dates.length === 2) {
      setPeriod("custom");
    }
  };

  const handlePeriodChange = (value) => {
    setPeriod(value);
    // Clear date range when using predefined periods
    if (value !== "custom") {
      setDateRange(null);
    }
  };

  const clearFilters = () => {
    setPeriod("week");
    setDateRange(null);
  };

  // Export functions
  const exportToExcel = async () => {
    try {
      message.loading({ content: getTranslation("common.loading"), key: "export" });
      
      // Create workbook
      const workbook = new ExcelJS.Workbook();
      workbook.creator = 'FECS Admin Dashboard';
      workbook.created = new Date();
      workbook.modified = new Date();
      
      // Create worksheet
      const worksheet = workbook.addWorksheet(getTranslation("dashboard.title"));
      
      // Define consistent styling
      const titleStyle = {
        font: { bold: true, size: 16, color: { argb: 'FF1890FF' } },
        alignment: { horizontal: 'center' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F8FF' } }
      };
      
      const sectionHeaderStyle = {
        font: { bold: true, size: 14, color: { argb: 'FF333333' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF5F5F5' } },
        border: {
          top: { style: 'thin', color: { argb: 'FFCCCCCC' } },
          bottom: { style: 'thin', color: { argb: 'FFCCCCCC' } }
        }
      };
      
      const tableHeaderStyle = {
        font: { bold: true, color: { argb: 'FFFFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1890FF' } },
        alignment: { horizontal: 'center', vertical: 'middle' }
      };
      
      const dataStyle = {
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: {
          top: { style: 'thin', color: { argb: 'FFEEEEEE' } },
          bottom: { style: 'thin', color: { argb: 'FFEEEEEE' } }
        }
      };
      
      // Report Header
      worksheet.mergeCells('A1:F1');
      const titleCell = worksheet.getCell('A1');
      titleCell.value = `📊 ${getTranslation("dashboard.title")} - ${getTranslation("dashboard.reportGenerated")}`;
      titleCell.style = titleStyle;
      
      worksheet.mergeCells('A2:F2');
      const dateCell = worksheet.getCell('A2');
      dateCell.value = `📅 ${getTranslation("dashboard.date")}: ${new Date().toLocaleString()}`;
      dateCell.style = { font: { italic: true }, alignment: { horizontal: 'center' } };
      
      // Add period information if applicable
      let currentRow = 3;
      if (period !== 'week' || dateRange) {
        worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
        const periodCell = worksheet.getCell(`A${currentRow}`);
        periodCell.value = `📊 ${getTranslation("dashboard.reportPeriod")}: ${
          dateRange && dateRange.length === 2 
            ? `${dateRange[0].format("YYYY/MM/DD")} - ${dateRange[1].format("YYYY/MM/DD")}`
            : getPeriodTranslation(period)
        }`;
        periodCell.style = { font: { italic: true }, alignment: { horizontal: 'center' } };
        currentRow++;
      }
      
      currentRow++; // Empty row
      
      // 1. EXECUTIVE SUMMARY
      worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
      const summaryHeader = worksheet.getCell(`A${currentRow}`);
      summaryHeader.value = `📈 ${getTranslation("dashboard.executiveSummary")}`;
      summaryHeader.style = sectionHeaderStyle;
      currentRow++;
      
      const summaryData = [
        [getTranslation("dashboard.totalOrders"), `${formatCompactNumber(stats.totalOrders || 0)}`, getTranslation("dashboard.growth"), `${stats.ordersGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.ordersGrowth || 0)}`],
        [getTranslation("dashboard.totalRevenue"), `${formatCurrency(stats.totalRevenue || 0)}`, getTranslation("dashboard.growth"), `${stats.revenueGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.revenueGrowth || 0)}`],
        [getTranslation("dashboard.totalCustomers"), `${formatCompactNumber(stats.totalCustomers || 0)}`, getTranslation("dashboard.growth"), `${stats.customersGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.customersGrowth || 0)}`],
        [getTranslation("dashboard.averageOrder"), `${formatCurrency(stats.averageOrderValue || 0)}`, '', '']
      ];
      
      summaryData.forEach(row => {
        const rowData = worksheet.addRow(row);
        rowData.eachCell((cell, colNumber) => {
          cell.style = dataStyle;
          if (colNumber === 1) cell.font = { bold: true };
          if (colNumber === 2 || colNumber === 4) cell.alignment = { horizontal: 'right' };
        });
        currentRow++;
      });
      
      currentRow++; // Empty row
      
      // 2. HOT ORDERS SECTION (Priority Orders)
      if (hotOrders.length > 0) {
        worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
        const hotOrdersHeader = worksheet.getCell(`A${currentRow}`);
        hotOrdersHeader.value = `🔥 ${t("dashboard.hotOrders")} - ${t("dashboard.priorityOrders")} (${hotOrders.length})`;
        hotOrdersHeader.style = { ...sectionHeaderStyle, fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFF0E6' } } };
        currentRow++;
        
        // Hot Orders Table Headers
        const hotOrderHeaders = [
          t("dashboard.orderId"),
          t("dashboard.customer"),
          t("dashboard.amount"),
          t("dashboard.status"),
          t("dashboard.date"),
          t("dashboard.priority")
        ];
        
        const headerRow = worksheet.addRow(hotOrderHeaders);
        headerRow.eachCell(cell => {
          cell.style = tableHeaderStyle;
        });
        currentRow++;
        
        // Hot Orders Data
        hotOrders.forEach(order => {
          const priority = order.order_status === 'pending' ? '🚨 ' + t("dashboard.urgent") :
                          order.order_status === 'confirmed' ? '⚡ ' + t("dashboard.high") :
                          order.order_status === 'preparing' ? '⏰ ' + t("dashboard.medium") :
                          '✅ ' + t("dashboard.ready");
          
          const rowData = [
            order.order_number,
            order.customer_name,
            formatCurrency(order.total_amount),
            t(`dashboard.status_${order.order_status}`) || order.order_status,
            formatDate(order.created_at, "short"),
            priority
          ];
          
          const dataRow = worksheet.addRow(rowData);
          dataRow.eachCell((cell, colNumber) => {
            cell.style = dataStyle;
            if (colNumber === 3) cell.alignment = { horizontal: 'right' }; // Amount
            if (order.order_status === 'pending') {
              cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFF0E6' } };
            }
          });
          currentRow++;
        });
        currentRow++; // Empty row
      }
      
      // 3. TOP PERFORMING PRODUCTS
      if (topProducts.length > 0) {
        worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
        const productsHeader = worksheet.getCell(`A${currentRow}`);
        productsHeader.value = `🏆 ${t("dashboard.topProducts")} - ${t("dashboard.bestSellers")}`;
        productsHeader.style = { ...sectionHeaderStyle, fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0FFF0' } } };
        currentRow++;
        
        // Products Table Headers
        const productHeaders = [
          t("dashboard.rank"),
          t("dashboard.product"),
          t("dashboard.sold"),
          t("dashboard.revenue"),
          t("dashboard.performance"),
          ''
        ];
        
        const prodHeaderRow = worksheet.addRow(productHeaders);
        prodHeaderRow.eachCell(cell => {
          cell.style = tableHeaderStyle;
        });
        currentRow++;
        
        // Products Data
        topProducts.forEach((product, index) => {
          const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${index + 1}`;
          const rowData = [
            medal,
            product.name,
            formatNumber(product.total_sold),
            formatCurrency(product.total_revenue),
            product.total_sold > 100 ? '⭐ ' + t("dashboard.excellent") : 
            product.total_sold > 50 ? '✨ ' + t("dashboard.good") : 
            '📈 ' + t("dashboard.growing"),
            ''
          ];
          
          const dataRow = worksheet.addRow(rowData);
          dataRow.eachCell((cell, colNumber) => {
            cell.style = dataStyle;
            if (colNumber === 3 || colNumber === 4) cell.alignment = { horizontal: 'right' };
            if (index < 3) {
              cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: index === 0 ? 'FFFFF9E6' : index === 1 ? 'FFF0F0F0' : 'FFFFF0E0' } };
            }
          });
          currentRow++;
        });
        currentRow++; // Empty row
      }
      
      // 4. ORDER TRENDS DATA
      if (orderFlow.length > 0) {
        worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
        const trendsHeader = worksheet.getCell(`A${currentRow}`);
        trendsHeader.value = `📊 ${t("dashboard.orderFlow")} - ${t("dashboard.trendsAnalysis")}`;
        trendsHeader.style = { ...sectionHeaderStyle, fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F8FF' } } };
        currentRow++;
        
        // Trends Table Headers
        const trendsHeaders = [
          t("dashboard.date"),
          t("dashboard.orders"),
          t("dashboard.trend"),
          t("dashboard.weekday"),
          '',
          ''
        ];
        
        const trendsHeaderRow = worksheet.addRow(trendsHeaders);
        trendsHeaderRow.eachCell(cell => {
          cell.style = tableHeaderStyle;
        });
        currentRow++;
        
        // Order Flow Data with trend analysis
        orderFlow.forEach((item, index) => {
          const currentOrders = item.orders || 0;
          const prevOrders = index > 0 ? (orderFlow[index - 1].orders || 0) : currentOrders;
          const trend = currentOrders > prevOrders ? '📈 ' + t("dashboard.increasing") :
                       currentOrders < prevOrders ? '📉 ' + t("dashboard.decreasing") :
                       '➡️ ' + t("dashboard.stable");
          
          const date = dayjs(item.period);
          const weekday = date.isValid() ? date.format('dddd') : '';
          
          const rowData = [
            date.isValid() ? date.format("YYYY/MM/DD") : item.period,
            formatNumber(currentOrders),
            trend,
            weekday,
            '',
            ''
          ];
          
          const dataRow = worksheet.addRow(rowData);
          dataRow.eachCell((cell, colNumber) => {
            cell.style = dataStyle;
            if (colNumber === 2) cell.alignment = { horizontal: 'right' };
          });
          currentRow++;
        });
      }
      
      // Footer
      currentRow += 2;
      worksheet.mergeCells(`A${currentRow}:F${currentRow}`);
      const footerCell = worksheet.getCell(`A${currentRow}`);
      footerCell.value = `📋 ${t("dashboard.reportFooter")} - FECS ${new Date().getFullYear()}`;
      footerCell.style = { 
        font: { italic: true, size: 10 }, 
        alignment: { horizontal: 'center' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8F8F8' } }
      };
      
      // Auto-fit columns
      worksheet.columns.forEach((column, index) => {
        let maxLength = 10;
        column.eachCell({ includeEmpty: true }, (cell) => {
          if (cell.value) {
            const length = cell.value.toString().length;
            if (length > maxLength) {
              maxLength = length;
            }
          }
        });
        column.width = Math.min(maxLength + 2, 40);
      });
      
      // Generate and download file
      const buffer = await workbook.xlsx.writeBuffer();
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `FECS-Dashboard-Report-${dayjs().format('YYYY-MM-DD-HH-mm')}.xlsx`;
      link.click();
      URL.revokeObjectURL(url);
      
      message.success({ content: t("dashboard.exportSuccess"), key: "export" });
    } catch (error) {
      console.error('Export error:', error);
      message.error({ content: t("dashboard.exportError"), key: "export" });
    }
  };

  const exportToPDF = async () => {
    try {
      message.loading({ content: t("common.loading"), key: "export" });
      
      // Create printable content with improved structure
      const printContent = `
        <html>
          <head>
            <title>${t("dashboard.title")} - ${t("dashboard.report")}</title>
            <style>
              body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 20px; 
                line-height: 1.6;
                color: #333;
              }
              .header {
                text-align: center;
                border-bottom: 3px solid #1890ff;
                padding-bottom: 20px;
                margin-bottom: 30px;
              }
              .header h1 { 
                color: #1890ff; 
                margin: 0;
                font-size: 32px;
                font-weight: bold;
              }
              .header .subtitle {
                color: #666;
                font-size: 16px;
                margin-top: 10px;
              }
              .section {
                margin: 30px 0;
                page-break-inside: avoid;
              }
              .section-header { 
                background: linear-gradient(135deg, #1890ff, #40a9ff);
                color: white; 
                padding: 15px;
                border-radius: 8px;
                font-size: 20px;
                font-weight: bold;
                margin-bottom: 20px;
                box-shadow: 0 4px 8px rgba(24, 144, 255, 0.2);
              }
              .stats-grid { 
                display: grid; 
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                gap: 20px; 
                margin: 20px 0; 
              }
              .stat-card { 
                border: 2px solid #f0f0f0; 
                padding: 20px; 
                border-radius: 12px; 
                text-align: center;
                background: linear-gradient(135deg, #fafafa, #ffffff);
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
              }
              .stat-title { 
                font-weight: 600; 
                color: #666; 
                font-size: 14px;
                margin-bottom: 8px;
              }
              .stat-value { 
                font-size: 28px; 
                font-weight: bold; 
                color: #1890ff;
                margin-bottom: 5px;
              }
              .stat-growth {
                font-size: 14px;
                font-weight: 600;
              }
              .growth-positive { color: #52c41a; }
              .growth-negative { color: #ff4d4f; }
              table { 
                width: 100%; 
                border-collapse: collapse; 
                margin: 20px 0;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                border-radius: 8px;
                overflow: hidden;
              }
              th { 
                background: linear-gradient(135deg, #1890ff, #40a9ff);
                color: white;
                padding: 15px 12px;
                text-align: left;
                font-weight: bold;
                font-size: 14px;
              }
              td { 
                border-bottom: 1px solid #f0f0f0; 
                padding: 12px; 
                font-size: 13px;
              }
              tr:nth-child(even) { background-color: #fafafa; }
              tr:hover { background-color: #e6f7ff; }
              .priority-urgent { background-color: #fff2e8 !important; }
              .priority-high { background-color: #f6ffed !important; }
              .priority-medium { background-color: #e6f7ff !important; }
              .priority-ready { background-color: #f9f0ff !important; }
              .medal { font-size: 18px; text-align: center; }
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 2px solid #f0f0f0;
                text-align: center;
                color: #666;
                font-size: 12px;
              }
              .no-data {
                text-align: center;
                padding: 40px;
                color: #999;
                font-style: italic;
              }
              @media print {
                .section { page-break-inside: avoid; }
                .section-header { page-break-after: avoid; }
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>📊 ${t("dashboard.title")}</h1>
              <div class="subtitle">
                <strong>${t("dashboard.reportGenerated")}:</strong> ${new Date().toLocaleString()}<br>
                ${period !== 'week' || dateRange ? 
                  `<strong>${t("dashboard.reportPeriod")}:</strong> ${
                    dateRange && dateRange.length === 2 
                      ? `${dateRange[0].format("YYYY/MM/DD")} - ${dateRange[1].format("YYYY/MM/DD")}`
                      : getPeriodTranslation(period)
                  }` : ''
                }
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">📈 ${t("dashboard.executiveSummary")}</div>
              <div class="stats-grid">
                <div class="stat-card">
                  <div class="stat-title">🛒 ${t("dashboard.totalOrders")}</div>
                  <div class="stat-value">${formatCompactNumber(stats.totalOrders || 0)}</div>
                  <div class="stat-growth ${stats.ordersGrowth >= 0 ? 'growth-positive' : 'growth-negative'}">
                    ${stats.ordersGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.ordersGrowth || 0)}
                  </div>
                </div>
                <div class="stat-card">
                  <div class="stat-title">💰 ${t("dashboard.totalRevenue")}</div>
                  <div class="stat-value">${formatCurrency(stats.totalRevenue || 0)}</div>
                  <div class="stat-growth ${stats.revenueGrowth >= 0 ? 'growth-positive' : 'growth-negative'}">
                    ${stats.revenueGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.revenueGrowth || 0)}
                  </div>
                </div>
                <div class="stat-card">
                  <div class="stat-title">👥 ${t("dashboard.totalCustomers")}</div>
                  <div class="stat-value">${formatCompactNumber(stats.totalCustomers || 0)}</div>
                  <div class="stat-growth ${stats.customersGrowth >= 0 ? 'growth-positive' : 'growth-negative'}">
                    ${stats.customersGrowth >= 0 ? '↗️' : '↘️'} ${formatPercentage(stats.customersGrowth || 0)}
                  </div>
                </div>
                <div class="stat-card">
                  <div class="stat-title">🎯 ${t("dashboard.averageOrder")}</div>
                  <div class="stat-value">${formatCurrency(stats.averageOrderValue || 0)}</div>
                </div>
              </div>
            </div>
            
            ${hotOrders.length > 0 ? `
              <div class="section">
                <div class="section-header">🔥 ${t("dashboard.hotOrders")} - ${t("dashboard.priorityOrders")} (${hotOrders.length})</div>
                <table>
                  <thead>
                    <tr>
                      <th>🏷️ ${t("dashboard.orderId")}</th>
                      <th>👤 ${t("dashboard.customer")}</th>
                      <th>💵 ${t("dashboard.amount")}</th>
                      <th>📊 ${t("dashboard.status")}</th>
                      <th>📅 ${t("dashboard.date")}</th>
                      <th>⚡ ${t("dashboard.priority")}</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${hotOrders.map(order => {
                      const priority = order.order_status === 'pending' ? '🚨 ' + t("dashboard.urgent") :
                                      order.order_status === 'confirmed' ? '⚡ ' + t("dashboard.high") :
                                      order.order_status === 'preparing' ? '⏰ ' + t("dashboard.medium") :
                                      '✅ ' + t("dashboard.ready");
                      
                      const rowClass = order.order_status === 'pending' ? 'priority-urgent' :
                                      order.order_status === 'confirmed' ? 'priority-high' :
                                      order.order_status === 'preparing' ? 'priority-medium' :
                                      'priority-ready';
                      
                      return `
                        <tr class="${rowClass}">
                          <td><strong>${order.order_number}</strong></td>
                          <td>${order.customer_name}</td>
                          <td><strong>${formatCurrency(order.total_amount)}</strong></td>
                          <td>${t(`dashboard.status_${order.order_status}`) || order.order_status}</td>
                          <td>${formatDate(order.created_at, "short")}</td>
                          <td><strong>${priority}</strong></td>
                        </tr>
                      `;
                    }).join('')}
                  </tbody>
                </table>
              </div>
            ` : ''}
            
            ${topProducts.length > 0 ? `
              <div class="section">
                <div class="section-header">🏆 ${t("dashboard.topProducts")} - ${t("dashboard.bestSellers")}</div>
                <table>
                  <thead>
                    <tr>
                      <th>🏅 ${t("dashboard.rank")}</th>
                      <th>📦 ${t("dashboard.product")}</th>
                      <th>📈 ${t("dashboard.sold")}</th>
                      <th>💰 ${t("dashboard.revenue")}</th>
                      <th>⭐ ${t("dashboard.performance")}</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${topProducts.map((product, index) => {
                      const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${index + 1}`;
                      const performance = product.total_sold > 100 ? '⭐ ' + t("dashboard.excellent") : 
                                         product.total_sold > 50 ? '✨ ' + t("dashboard.good") : 
                                         '📈 ' + t("dashboard.growing");
                      
                      return `
                        <tr>
                          <td class="medal">${medal}</td>
                          <td><strong>${product.name}</strong></td>
                          <td>${formatNumber(product.total_sold)}</td>
                          <td><strong>${formatCurrency(product.total_revenue)}</strong></td>
                          <td>${performance}</td>
                        </tr>
                      `;
                    }).join('')}
                  </tbody>
                </table>
              </div>
            ` : ''}
            
            ${orderFlow.length > 0 ? `
              <div class="section">
                <div class="section-header">📊 ${t("dashboard.orderFlow")} - ${t("dashboard.trendsAnalysis")}</div>
                <table>
                  <thead>
                    <tr>
                      <th>📅 ${t("dashboard.date")}</th>
                      <th>📦 ${t("dashboard.orders")}</th>
                      <th>📈 ${t("dashboard.trend")}</th>
                      <th>📍 ${t("dashboard.weekday")}</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${orderFlow.map((item, index) => {
                      const currentOrders = item.orders || 0;
                      const prevOrders = index > 0 ? (orderFlow[index - 1].orders || 0) : currentOrders;
                      const trend = currentOrders > prevOrders ? '📈 ' + t("dashboard.increasing") :
                                   currentOrders < prevOrders ? '📉 ' + t("dashboard.decreasing") :
                                   '➡️ ' + t("dashboard.stable");
                      
                      const date = dayjs(item.period);
                      const weekday = date.isValid() ? date.format('dddd') : '';
                      
                      return `
                        <tr>
                          <td>${date.isValid() ? date.format("YYYY/MM/DD") : item.period}</td>
                          <td><strong>${formatNumber(currentOrders)}</strong></td>
                          <td>${trend}</td>
                          <td>${weekday}</td>
                        </tr>
                      `;
                    }).join('')}
                  </tbody>
                </table>
              </div>
            ` : `<div class="section"><div class="no-data">${t("dashboard.noData")}</div></div>`}
            
            <div class="footer">
              <div>📋 ${t("dashboard.reportFooter")} - FECS Admin Dashboard</div>
              <div>© ${new Date().getFullYear()} FECS E-commerce Platform. ${t("dashboard.allRightsReserved")}</div>
            </div>
          </body>
        </html>
      `;
      
      // Create and trigger print
      const printWindow = window.open('', '_blank');
      printWindow.document.write(printContent);
      printWindow.document.close();
      
      // Wait a moment then trigger print
      setTimeout(() => {
        printWindow.print();
        message.success({ content: t("dashboard.exportSuccess"), key: "export" });
      }, 500);
      
    } catch (error) {
      console.error('PDF Export error:', error);
      message.error({ content: t("dashboard.exportError"), key: "export" });
    }
  };

  const exportMenuItems = [
    {
      key: 'excel',
      label: (
        <span>
          <FileExcelOutlined style={{ marginRight: 8, color: '#52c41a' }} />
          {t("dashboard.exportExcel")}
        </span>
      ),
      onClick: exportToExcel,
    },
    {
      key: 'pdf',
      label: (
        <span>
          <FilePdfOutlined style={{ marginRight: 8, color: '#ff4d4f' }} />
          {t("dashboard.exportPDF")}
        </span>
      ),
      onClick: exportToPDF,
    },
  ];

  // Helper function to get period translation
  const getPeriodTranslation = (periodValue) => {
    const periodMap = {
      day: t("dashboard.day"),
      week: t("dashboard.week"),
      month: t("dashboard.month"),
      year: t("dashboard.year"),
      custom: t("dashboard.customRange")
    };
    return periodMap[periodValue] || periodValue;
  };

  // Chart configurations
  const orderFlowConfig = {
    data: orderFlow,
    xField: "period",
    yField: "orders",
    point: {
      size: 5,
      shape: "diamond",
    },
    label: {
      style: {
        fill: "#aaa",
      },
    },
    smooth: true,
    color: "#1890ff",
    meta: {
      orders: {
        alias: "Orders",
        formatter: (value) => formatNumber(value),
      },
      period: {
        alias: "Period",
        formatter: (value) => {
          // Try to parse as date and format, fallback to original value
          const date = dayjs(value);
          return date.isValid() ? date.format("YYYY/MM/DD") : value;
        },
      },
    },
    tooltip: {
      formatter: (datum) => {
        return {
          name: "Orders",
          value: formatNumber(datum.orders || 0), // Fix null issue
        };
      },
      customContent: (title, items) => {
        if (!items || items.length === 0) return null;
        const item = items[0];
        const data = item.data;
        return `<div style="padding: 8px;">
          <div style="margin-bottom: 4px; font-weight: bold;">${dayjs(data.period).format("YYYY/MM/DD")}</div>
          <div style="color: #1890ff;">
            <span style="display: inline-block; width: 8px; height: 8px; background: #1890ff; border-radius: 50%; margin-right: 8px;"></span>
            Orders: ${formatNumber(data.orders || 0)}
          </div>
        </div>`;
      }
    },
    yAxis: {
      label: {
        formatter: (value) => formatNumber(value),
      },
      title: {
        text: "Orders",
      },
    },
    xAxis: {
      label: {
        formatter: (value) => {
          // Try to parse as date and format, fallback to original value
          const date = dayjs(value);
          return date.isValid() ? date.format("MM/DD") : value;
        },
        rotate: 0, // Make labels horizontal
        style: {
          textAlign: "center",
          fontSize: "12px",
        },
        autoRotate: false, // Disable auto rotation
      },
      title: {
        text: "Period",
      },
    },
  };

  const salesColumnConfig = {
    data: salesData,
    xField: "date",
    yField: "revenue",
    color: "#52c41a",
    columnWidthRatio: 0.8,
    meta: {
      revenue: {
        alias: "Revenue",
        formatter: (value) => formatCurrency(value),
      },
      date: {
        alias: "Date",
        formatter: (value) => dayjs(value).format("YYYY/MM/DD"),
      },
    },
    tooltip: {
      formatter: (datum) => {
        return {
          name: "Revenue",
          value: formatCurrency(datum.revenue),
        };
      },
    },
    yAxis: {
      label: {
        formatter: (value) => formatCurrency(value),
      },
      title: {
        text: "Revenue",
      },
    },
    xAxis: {
      label: {
        formatter: (value) => dayjs(value).format("YYYY/MM/DD"),
        rotate: 0, // Make labels horizontal
        style: {
          textAlign: "center",
          fontSize: "12px",
        },
        autoRotate: false, // Disable auto rotation
      },
      title: {
        text: "Date",
      },
    },
  };

  const orderStatusConfig = {
    appendPadding: 10,
    data: stats.orderStatusDistribution || [],
    angleField: "count",
    colorField: "order_status",
    radius: 0.75,
    label: {
      type: "spider",
      labelHeight: 28,
      content: "{name}\n{percentage}",
      formatter: (datum, mappingData) => {
        const { count } = datum;
        return `${
          t(`dashboard.status_${datum.order_status}`) || datum.order_status
        }\n${formatNumber(count)}`;
      },
    },
    tooltip: {
      formatter: (datum) => {
        return {
          name:
            t(`dashboard.status_${datum.order_status}`) || datum.order_status,
          value: formatNumber(datum.count),
        };
      },
    },
    interactions: [
      {
        type: "element-selected",
      },
      {
        type: "element-active",
      },
    ],
  };

  // Table columns
  const orderColumns = [
    {
      title: t("dashboard.orderId"),
      dataIndex: "order_number",
      key: "order_number",
      render: (text) => <Text strong>{text}</Text>,
    },
    {
      title: t("dashboard.customer"),
      dataIndex: "customer_name",
      key: "customer_name",
    },
    {
      title: t("dashboard.amount"),
      dataIndex: "total_amount",
      key: "total_amount",
      render: (amount) => <Text strong>{formatCurrency(amount)}</Text>,
    },
    {
      title: t("dashboard.status"),
      dataIndex: "order_status",
      key: "order_status",
      render: (status) => {
        const colors = {
          pending: "warning",
          confirmed: "processing",
          preparing: "blue",
          ready: "cyan",
          out_for_delivery: "geekblue",
          delivered: "success",
          cancelled: "error",
        };
        return (
          <Tag color={colors[status] || "default"}>
            {t(`dashboard.status_${status}`) || status}
          </Tag>
        );
      },
    },
    {
      title: t("dashboard.date"),
      dataIndex: "created_at",
      key: "created_at",
      render: (date) => formatDate(date, "short"),
    },
  ];

  const topProductsColumns = [
    {
      title: t("dashboard.product"),
      dataIndex: "name",
      key: "name",
      render: (text) => <Text strong>{text}</Text>,
    },
    {
      title: t("dashboard.sold"),
      dataIndex: "total_sold",
      key: "total_sold",
      render: (value) => <Text>{formatNumber(value)}</Text>,
    },
    {
      title: t("dashboard.revenue"),
      dataIndex: "total_revenue",
      key: "total_revenue",
      render: (value) => (
        <Text strong type="success">
          {formatCurrency(value)}
        </Text>
      ),
    },
  ];

  if (loading) {
    return (
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "400px",
        }}
      >
        <Spin size="large" />
      </div>
    );
  }
  return (
    <div>
      {/* Page Header */}
      <div style={{ marginBottom: 24 }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={2} style={{ margin: 0 }}>
              {t("dashboard.title")}
            </Title>
            <Text type="secondary">{t("dashboard.subtitle")}</Text>
          </Col>
          <Col>
            <Space>
              <Select
                value={period}
                onChange={handlePeriodChange}
                style={{ width: 120 }}
              >
                <Option value="day">{t("dashboard.today")}</Option>
                <Option value="week">{t("dashboard.thisWeek")}</Option>
                <Option value="month">{t("dashboard.thisMonth")}</Option>
                <Option value="year">{t("dashboard.thisYear")}</Option>
                <Option value="custom">{t("dashboard.customRange")}</Option>
              </Select>

              {period === "custom" && (
                <RangePicker
                  value={dateRange}
                  onChange={handleDateRangeChange}
                  style={{ width: 240 }}
                  placeholder={[
                    t("dashboard.startDate"),
                    t("dashboard.endDate"),
                  ]}
                  format="YYYY-MM-DD"
                />
              )}

              {(period === "custom" || dateRange) && (
                <Button
                  onClick={clearFilters}
                  title={t("dashboard.clearFilters")}
                >
                  {t("dashboard.clear")}
                </Button>
              )}

              <Button
                icon={<ReloadOutlined />}
                onClick={refreshData}
                loading={statsLoading}
              >
                {t("common.refresh")}
              </Button>

              <Dropdown
                menu={{
                  items: exportMenuItems,
                }}
                placement="bottomLeft"
              >
                <Button icon={<DownloadOutlined />}>
                  {t("dashboard.export")} ▼
                </Button>
              </Dropdown>
            </Space>
          </Col>
        </Row>
      </div>

      {/* Statistics Cards */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalOrders")}
              value={formatCompactNumber(stats.totalOrders || 0)}
              prefix={<ShoppingCartOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.ordersGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.ordersGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.ordersGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#1890ff" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalRevenue")}
              value={formatCurrency(stats.totalRevenue || 0)}
              prefix={<DollarCircleOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.revenueGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.revenueGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.revenueGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#52c41a" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.totalCustomers")}
              value={formatCompactNumber(stats.totalCustomers || 0)}
              prefix={<UserOutlined />}
              suffix={
                <span
                  style={{
                    fontSize: "14px",
                    color: stats.customersGrowth >= 0 ? "#52c41a" : "#ff4d4f",
                  }}
                >
                  {stats.customersGrowth >= 0 ? (
                    <RiseOutlined />
                  ) : (
                    <FallOutlined />
                  )}
                  {formatPercentage(stats.customersGrowth || 0)}
                </span>
              }
              valueStyle={{ color: "#faad14" }}
            />
          </Card>
        </Col>

        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title={t("dashboard.averageOrder")}
              value={formatCurrency(stats.averageOrderValue || 0)}
              prefix={<ShopOutlined />}
              valueStyle={{ color: "#722ed1" }}
            />
          </Card>
        </Col>
      </Row>

      {/* Hot Orders Section - Orders that need action */}
      {hotOrders.length > 0 && (
        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
          <Col span={24}>
            <Card
              title={
                <Space>
                  <span style={{ color: '#ff4d4f' }}>
                    🔥 {t("dashboard.hotOrders")}
                  </span>
                  <Tag color="red" style={{ fontWeight: 'bold' }}>
                    {hotOrders.length} {t("dashboard.needsAction")}
                  </Tag>
                </Space>
              }
              extra={
                <Space>
                  <Text type="secondary">
                    {t("dashboard.requiresAttention")}
                  </Text>
                  <Button type="link" href="/orders">
                    {t("dashboard.viewAll")}
                  </Button>
                </Space>
              }
              style={{ 
                border: '2px solid #ff7875',
                boxShadow: '0 4px 12px rgba(255, 77, 79, 0.15)'
              }}
            >
              <Table
                dataSource={hotOrders}
                columns={orderColumns}
                pagination={false}
                size="small"
                scroll={{ x: 600 }}
                rowKey="id"
                rowClassName={(record) => {
                  if (record.order_status === 'pending') return 'hot-order-pending';
                  if (record.order_status === 'confirmed') return 'hot-order-confirmed';
                  if (record.order_status === 'preparing') return 'hot-order-preparing';
                  if (record.order_status === 'ready') return 'hot-order-ready';
                  return '';
                }}
              />
            </Card>
          </Col>
        </Row>
      )}

      <style dangerouslySetInnerHTML={{__html: `
        .hot-order-pending td { background-color: #fff7e6 !important; }
        .hot-order-confirmed td { background-color: #f6ffed !important; }
        .hot-order-preparing td { background-color: #e6f7ff !important; }
        .hot-order-ready td { background-color: #f9f0ff !important; }
        .hot-order-pending:hover td { background-color: #ffe7ba !important; }
        .hot-order-confirmed:hover td { background-color: #d9f7be !important; }
        .hot-order-preparing:hover td { background-color: #bae7ff !important; }
        .hot-order-ready:hover td { background-color: #efdbff !important; }
      `}} />

      {/* Shipping Analytics */}
      {shippingAnalytics && (
        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
          <Col span={24}>
            <Card
              title={`🚚 ${t("dashboard.shippingAnalytics")}`}
              extra={
                <Button
                  size="small"
                  icon={<ReloadOutlined />}
                  onClick={loadShippingAnalytics}
                >
                  {t("common.refresh")}
                </Button>
              }
            >
              <Row gutter={16}>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.avgDistance")}
                    value={
                      shippingAnalytics.distance_statistics?.avg_distance || 0
                    }
                    suffix="km"
                    precision={1}
                    prefix="🛣️"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.avgShippingCost")}
                    value={
                      shippingAnalytics.distance_statistics
                        ?.avg_shipping_cost || 0
                    }
                    suffix="JOD"
                    precision={2}
                    prefix="💰"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.freeShippingRate")}
                    value={
                      shippingAnalytics.free_shipping_analysis
                        ?.free_shipping_percentage || 0
                    }
                    suffix="%"
                    precision={1}
                    prefix="🎁"
                  />
                </Col>
                <Col xs={24} sm={6}>
                  <Statistic
                    title={t("dashboard.totalCalculations")}
                    value={
                      shippingAnalytics.calculation_summary
                        ?.total_calculations || 0
                    }
                    prefix="📊"
                  />
                </Col>
              </Row>

              {shippingAnalytics.zone_usage && (
                <div style={{ marginTop: 16 }}>
                  <Title level={5}>{t("dashboard.popularZones")}</Title>
                  <Row gutter={8}>
                    {shippingAnalytics.zone_usage
                      .slice(0, 3)
                      .map((zone, index) => (
                        <Col key={zone.zone_name_en}>
                          <Tag
                            color={["blue", "green", "orange"][index]}
                            style={{ marginBottom: 4 }}
                          >
                            {zone.zone_name_en}: {zone.usage_count} {t("dashboard.ordersText")}
                          </Tag>
                        </Col>
                      ))}
                  </Row>
                </div>
              )}
            </Card>
          </Col>
        </Row>
      )}

      {/* Charts Row */}
      <Row gutter={[16]} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={24}>
          <Card
            title={t("dashboard.orderFlow")}
            extra={
              <Text type="secondary">
                {period === "custom" && dateRange && dateRange.length === 2
                  ? `${dateRange[0].format("MMM DD")} - ${dateRange[1].format(
                      "MMM DD, YYYY"
                    )}`
                  : getPeriodTranslation(period)}
              </Text>
            }
            bodyStyle={{ padding: 0 }} // Optional: reduce padding if needed
          >
            {orderFlow.length > 0 ? (
              <div style={{ width: "100%", padding: 16 }}>
                <Line {...orderFlowConfig} height={300} />
              </div>
            ) : (
              <div
                style={{
                  height: 300,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Text type="secondary">{t("dashboard.noData")}</Text>
              </div>
            )}
          </Card>
        </Col>
      </Row>

        {/* <Col xs={24} lg={24}>
        <Card
          title={t("dashboard.salesRevenue")}
          extra={
            <Text type="secondary">
              {period === "custom" && dateRange && dateRange.length === 2
                ? `${dateRange[0].format("MMM DD")} - ${dateRange[1].format(
                    "MMM DD, YYYY"
                  )}`
                : t(`dashboard.${period}`)}
            </Text>
          }
        >
          {salesData.length > 0 ? (
            <Column {...salesColumnConfig} height={300} />
          ) : (
            <div
              style={{
                height: 300,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Text type="secondary">{t("dashboard.noData")}</Text>
            </div>
          )}
        </Card>
      </Col> */}

      {/* Data Tables Row */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={16}>
          <Card
            title={t("dashboard.recentOrders")}
            extra={
              <Button type="link" href="/orders">
                {t("dashboard.viewAll")}
              </Button>
            }
          >
            <Table
              dataSource={recentOrders}
              columns={orderColumns}
              pagination={false}
              size="small"
              scroll={{ x: 600 }}
              rowKey="id"
            />
          </Card>
        </Col>

        <Col xs={24} lg={8}>
          <Card
            title={t("dashboard.topProducts")}
            extra={<TrophyOutlined style={{ color: "#faad14" }} />}
          >
            <Table
              dataSource={topProducts}
              columns={topProductsColumns}
              pagination={false}
              size="small"
              showHeader={false}
              rowKey="id"
            />
          </Card>
        </Col>
      </Row>

      {/* Order Status Distribution and Alerts */}
      <Row gutter={[16, 16]}>
        <Col xs={24} lg={12}>
          <Card title={t("dashboard.orderStatusDistribution")}>
            {stats.orderStatusDistribution &&
            stats.orderStatusDistribution.length > 0 ? (
              <Pie {...orderStatusConfig} height={300} />
            ) : (
              <div
                style={{
                  height: 300,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <Text type="secondary">{t("dashboard.noData")}</Text>
              </div>
            )}
          </Card>
        </Col>

        <Col xs={24} lg={12}>
          <Card
            title={t("dashboard.inventoryAlerts")}
            extra={<WarningOutlined style={{ color: "#faad14" }} />}
          >
            <Space direction="vertical" style={{ width: "100%" }}>
              {inventoryAlerts.length > 0 ? (
                inventoryAlerts.map((item, index) => (
                  <Alert
                    key={index}
                    message={item.name}
                    description={`${t("dashboard.stock")}: ${
                      t(`dashboard.stock_${item.stock_status}`) ||
                      item.stock_status
                    }`}
                    type={
                      item.stock_status === "out_of_stock" ? "error" : "warning"
                    }
                    showIcon
                    size="small"
                  />
                ))
              ) : (
                <Text type="secondary">{t("dashboard.noAlerts")}</Text>
              )}
            </Space>
          </Card>
        </Col>
      </Row>

      <QuickNotificationFAB />
    </div>
  );
};

export default Dashboard;
