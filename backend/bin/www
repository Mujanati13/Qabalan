#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('qabalan-ecommerce-api:server');
const http = require('http');
const DatabaseSetup = require('../utils/database-setup');
const SocketManager = require('../config/socket');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Initialize Socket.IO
 */
console.log('🔌 Initializing Socket.IO server...');
const socketManager = new SocketManager(server);

// Make socket manager available globally
global.socketManager = socketManager;
console.log('✅ Socket.IO server initialized successfully');

/**
 * Setup database and start server
 */

async function startServer() {
  try {
    // Setup database tables and admin user
    console.log('🔄 Setting up database...');
    const dbSetup = new DatabaseSetup();
    await dbSetup.setup();
    
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Start the server
startServer();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('🚀 Server listening on ' + bind);
  debug('Listening on ' + bind);
  
  // Initialize global disable scheduler after server starts
  const globalDisableScheduler = require('../services/globalDisableScheduler');
  globalDisableScheduler.initialize().catch(error => {
    console.error('Failed to initialize global disable scheduler:', error);
  });
}
